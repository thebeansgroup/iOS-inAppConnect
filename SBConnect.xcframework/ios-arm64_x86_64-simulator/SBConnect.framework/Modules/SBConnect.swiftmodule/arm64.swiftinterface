// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SBConnect
import Foundation
import Swift
import UIKit
import WebKit
public enum SBConnectResponse : Swift.Equatable {
  case success(_: Swift.String?)
  case failure(_: SBConnectError)
  case closed
  public static func == (a: SBConnectResponse, b: SBConnectResponse) -> Swift.Bool
}
public typealias SBConnectCompletionHandler = (SBConnectResponse) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class SBConnect : ObjectiveC.NSObject, SBConnectProtocol {
  public static func connect(presentingViewController: UIKit.UIViewController? = nil, slug: Swift.String, countryCode: Swift.String, completion: @escaping SBConnectCompletionHandler)
  @objc deinit
  @objc override dynamic public init()
}
public enum SBConnectError : Foundation.LocalizedError, Swift.Equatable {
  case invalidParameters
  case pageNotFound(_: Swift.String?)
  case codeIssuance(_: Swift.String?)
  case general(_: Swift.String?)
  case noCameraUsageString
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SBConnectError, b: SBConnectError) -> Swift.Bool
}
public protocol SBConnectProtocol {
  static func connect(presentingViewController: UIKit.UIViewController?, slug: Swift.String, countryCode: Swift.String, completion: @escaping SBConnectCompletionHandler)
}
extension UIColor {
  public static func palette(_ name: PaletteColor, alpha: CoreGraphics.CGFloat = 1) -> UIKit.UIColor
}
public enum PaletteColor : Swift.String, Swift.CaseIterable {
  case uiBlue300
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaletteColor]
  public static var allCases: [PaletteColor] {
    get
  }
}
extension PaletteColor : Swift.Equatable {}
extension PaletteColor : Swift.Hashable {}
extension PaletteColor : Swift.RawRepresentable {}
